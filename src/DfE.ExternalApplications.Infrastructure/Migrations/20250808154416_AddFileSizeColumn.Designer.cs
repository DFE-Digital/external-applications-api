// <auto-generated />
using System;
using DfE.ExternalApplications.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DfE.ExternalApplications.Infrastructure.Migrations
{
    [DbContext(typeof(ExternalApplicationsContext))]
    [Migration("20250808154416_AddFileSizeColumn")]
    partial class AddFileSizeColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("ApplicationReference")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ApplicationReference");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedOn");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<Guid>("TemplateVersionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TemplateVersionId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("TemplateVersionId");

                    b.ToTable("Applications", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.ApplicationResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ResponseId");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedOn");

                    b.Property<string>("ResponseBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResponseBody");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("ApplicationResponses", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FileId");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FileName");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSize");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("OriginalFileName");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Path");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UploadedBy");

                    b.Property<DateTime>("UploadedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UploadedOn")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("Files", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PermissionId");

                    b.Property<byte>("AccessType")
                        .HasColumnType("tinyint")
                        .HasColumnName("AccessType");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<Guid>("GrantedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GrantedBy");

                    b.Property<DateTime>("GrantedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("GrantedOn")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ResourceKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ResourceKey");

                    b.Property<byte>("ResourceType")
                        .HasColumnType("tinyint")
                        .HasColumnName("ResourceType");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("GrantedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.TaskAssignmentLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskAssignmentLabelsId");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("TaskId");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("TaskAssignmentLabels", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TemplateId");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Templates", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.TemplatePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TemplatePermissionId");

                    b.Property<byte>("AccessType")
                        .HasColumnType("tinyint")
                        .HasColumnName("AccessType");

                    b.Property<Guid>("GrantedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GrantedBy");

                    b.Property<DateTime>("GrantedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("GrantedOn")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TemplateId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GrantedBy");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("TemplatePermissions", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.TemplateVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TemplateVersionId");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("JsonSchema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JsonSchema");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedOn");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TemplateId");

                    b.Property<string>("VersionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VersionNumber");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateVersions", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Email");

                    b.Property<string>("ExternalProviderId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ExternalProviderId")
                        .IsUnique()
                        .HasFilter("[ExternalProviderId] IS NOT NULL");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", "ea");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.Application", b =>
                {
                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.TemplateVersion", "TemplateVersion")
                        .WithMany()
                        .HasForeignKey("TemplateVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("TemplateVersion");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.ApplicationResponse", b =>
                {
                    b.HasOne("DfE.ExternalApplications.Domain.Entities.Application", "Application")
                        .WithMany("Responses")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.File", b =>
                {
                    b.HasOne("DfE.ExternalApplications.Domain.Entities.Application", "Application")
                        .WithMany("Files")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "UploadedByUser")
                        .WithMany("Files")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.Permission", b =>
                {
                    b.HasOne("DfE.ExternalApplications.Domain.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "GrantedByUser")
                        .WithMany()
                        .HasForeignKey("GrantedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("GrantedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.TaskAssignmentLabel", b =>
                {
                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.Template", b =>
                {
                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.TemplatePermission", b =>
                {
                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "GrantedByUser")
                        .WithMany()
                        .HasForeignKey("GrantedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "User")
                        .WithMany("TemplatePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrantedByUser");

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.TemplateVersion", b =>
                {
                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.Template", "Template")
                        .WithMany("TemplateVersions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.User", b =>
                {
                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DfE.ExternalApplications.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.Application", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.Template", b =>
                {
                    b.Navigation("TemplateVersions");
                });

            modelBuilder.Entity("DfE.ExternalApplications.Domain.Entities.User", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Permissions");

                    b.Navigation("TemplatePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
